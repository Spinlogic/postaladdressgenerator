'''
Geo codes postal addresses using https://geocode.maps.co/

This API limits to 10 request per second, so this class does simple throttling using a safe factor to comply with
this limit.
'''

import time
import json
import requests
import urllib
import urllib.parse

SAFE_WAIT_TIME = 100  # milliseconds that should pass between API calls

class GeoCoder(object):

    def __init__(self):
        self._baseUrl = "https://geocode.maps.co/search?q="
        self._nextOcassionEpoch = 0    # epoch in milliseconds. Used to throttle requests
        self._numFailures = 0
        self._numErrors = 0

    def getNumFailures(self):
        return self._numFailures

    def getNumErrors(self):
        return self._numErrors

    def resolvePostalAddress(self, postalAddress):
        '''
        Resolve geo-coordinates (lat, lon) of a postal address
        :param postalAddress: address generated by generateRandomAddresses method of class PostalAddressGenerator
        :return:
        '''
        pa = postalAddress.replace(",", " ")    # Replace commas with spaces
        url = self._baseUrl + urllib.parse.quote_plus(pa)
        current_epoch = int(time.time()*1000)
        if(current_epoch < self._nextOcassionEpoch):
            time.sleep((self._nextOcassionEpoch - current_epoch) / 1000)   # Sleep for some milliseconds
        resp = requests.request("GET", url)
        self._nextOcassionEpoch = int(time.time() * 1000) + SAFE_WAIT_TIME
        # read the results and parse the JSON
        if resp.status_code == 200:
            geoloc = resp.json()
            if len(geoloc) > 0:
                return [geoloc[0]["lat"], geoloc[0]["lon"]]
            else:
                self._numFailures += 1
        else:
            self._numErrors += 1
        return None
